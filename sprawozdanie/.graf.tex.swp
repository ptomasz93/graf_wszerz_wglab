\documentclass[10pt,oneside]{mwbk}

% ustawienia kodowania pliku i języka
\usepackage[T1]{polski}
\usepackage[utf8]{inputenc}

\usepackage{indentfirst}
\usepackage{graphicx}


% czcionka Times
\usepackage{times}

% odstępy na 1.5 (pomimo, iż linespread jest na 1.3
\linespread{1.3}

% dzielenie wyrazów – większe odstępy, mniej dzielenia
\hyphenpenalty=5000
\tolerance=5000

%import z pliku csv
%\usepackage{csvsimple}

%strona tytułowa
\renewcommand {\maketitle}{
\begin {titlepage}
\begin {center}
	\LARGE
	\textbf {PROJEKTOWANIE ALGORYTMOW I METODY SZTUCZNEJ INTELIGENCJI}
	\newline
	\newline
	\textit {SPRAWOZDANIE Z  LABORATORIUM}
	\textbf{ GRAF-przszukiwanie wszerz i w głąb}
	\newline
	\begin{table}
	\begin{center}
	\begin{tabular}{rl}
	IMIĘ I NAZWISKO & Tomasz Piotrowski \\
	NR INDEKSU & 200524 \\	
	DATA  & 24.04.2014 \\
	\end{tabular}

	\end{center}
	\end{table}
\end {center}
\end {titlepage}}

\renewcommand*\thesection{\arabic{section}} 
\begin{document}
\maketitle
\section{Wstęp}
	

	\indent  W informatyce grafem nazywamy strukturę G=(V, E) składającą się z węzłów (wierzchołków, oznaczanych przez V) wzajemnie połączonych za pomocą krawędzi (oznaczonych przez E).
Grafy dzielimy na grafy skierowane i nieskierowane:\\
	
	\indent Celem tego ćwiczenia jest zaimplementowanie struktury grafu oraz przetestowanie działania algorytmów przechodzenia w szerz .
	
\section {Graf}

W literaturze można znaleźć dwie propozycję implementacji grafu. Implementacja z pomocą list sąsiedztwa lub za pomocą macierzy sąsiedztwa.
Graf zaimplementowany przezemnie opiera się na dynamicznej tablicy oraz vectorze. Wierzchołki grafu przechowywyane są w tablicy dynamicznej a krawędzie w listach sasiedztwa. Implementacja przezemnie wybrana chrakteryzuje się korzystniejszą złożonością obliczeniową $O(V+E)$.
Macierz sąsiedztwa posiada złożononość obliczeniową $O(V^2)$.
Program przezemnie napisany pozwala na tworzenie grafu za pomocą dostarczonego MENU, lub odpowiednio wyedytowanych plikow *.txt.\\
	\indent Do generowania pliku tekstowego została napisana odpowiednia funkcja. Wygenerowany graf charakteryzuje się krutkimi połączeniami, każdy wierzchołek łaczy się z wierzchołkiem zapisanym maksymalnie o 6 pozycji dalej w tablicy. Dzięki takiej budowie grafu możemy przprowadzić testy wyszukiwania w ktorych funkcja wraz z wieksza odlegloscia midzy wierzcholkami gwarantuję większą ilość połączeń do sprawdzenia.
\section {Przeszukiwanie wszerz}
	Przeszukiwanie wszerz (ang. Breadth-first search, w skrócie BFS) – jeden z  algorytmów przeszukiwania grafu. Przechodzenie grafu rozpoczyna się od zadanego wierzchołka s i polega na odwiedzeniu wszystkich osiągalnych z niego wierzchołków. Wynikiem działania algorytmu jest także drzewo przeszukiwania wszerz o korzeniu w s, zawierające wszystkie wierzchołki do których prowadzi droga z s.\\
	\indent Algorytm działa prawidłowo zarówno dla grafów skierowanych jak i nieskierowanych. Algorytm przechodzenie wszerz jest kompletny. Jeśli istnieje droga między zadanymi wierzchołkami, zostanie ona zawsze odnaleziona.\\
	\indent Złożoność czasowa algorytmu związana jest z ilością krawędzi oraz wierzchołków jakie musi przejsc algorytm. W najgorszym przypadku jest to $O(|V|+|E|)$
	\\Zastosowanie algorytmu:
\begin{itemize}
\item odnalezienie wszsytskich połączonych węzłów w grafie.
\item odnalezienie najkrótszej drogi między dwoma wierzchołkami.
\item sprawdzenie czy graf jest dwudzielny
\end{itemize}

\section {wyszukiwanie drogi za pomoca bfs}
W programie została zaimplementowana funkcja pozwalająca na odnalezienie dorgi za pomoca przeszukiwania w szerz. Droga znaleziona ta metoda jest najkrtosza z mozliwych drog. Algorytm nie uwzglednia jednak wag polaczen co powoduje jego niedoskonalosc.

\section {Przeszukiwanie w głąb}
Przeszukiwanie w głąb (ang. Depth-first search, w skrócie DFS) – jeden z algorytmów przeszukiwania grafu. Przeszukiwanie w głąb polega na badaniu wszystkich krawędzi wychodzących z podanego wierzchołka. Po zbadaniu wszystkich krawędzi wychodzących z danego wierzchołka algorytm powraca do wierzchołka, z którego dany wierzchołek został odwiedzony[1].\\
\indent Złożoność czasowa algorytmu również wynosi $O(|V|+|E|)$ ponieważ tak jak i w przechodzeniu wszerz algorytm odwiedza wszystkie białe wierzchołki \\
\indent Złożoność pamięciowa przeszukiwania w głąb w przypadku drzewa jest o wiele mniejsza niż przeszukiwania wszerz, gdyż algorytm w każdym momencie wymaga zapamiętania tylko ścieżki od korzenia do bieżącego węzła, podczas gdy przeszukiwanie wszerz wymaga zapamiętywania wszystkich węzłów w danej odległości od korzenia, co zwykle rośnie wykładniczo w funkcji długości ścieżki.\\
\indent Algorytm przechodzeni w głąb jest wykorzystywany jako pod program w innych algorytmach działających na grafach.
\begin{itemize}
\item do wyznaczania silnych spójnych składowych grafu skierowanego
\item w algorytmie sortowania topologicznego skierowanego grafu acyklicznego
\end{itemize}
\section {wyszukiwanie drogi za pomoca dfs}
W programie została zaimplementowana rowniez funkcja wyszukiwania drogi za pomoca algorytmu dfs. Funkcja ta znajduje drogę, jednak w przeciwieństwie do wyszukiwania za pomoca algorytmu bfs nie jest to droga najkrutsza. Funkcja rowniez nie uwzglednia wag polaczen.
\section{wyszukiwanie A*}
\indent 
W programie imprelmentacja A* została oparta na vectorze z biblioteki STL, oraz tablicy dynamicznej która jest zwracana przez funkcję wyszukiwania.\\ 
\indent W implementacji zapisana została heurystyka euklidesowa oraz manhatan. Za pomocą drobnej zmiany w pliku graf.cpp mozna wybrac sposob wybierania heurystki. W obliczeniu heurystyki zostało założone że graf jest rozpięty na planszy o wymiarach 100x100 pól. Dzięki temu założeniu możemy wyliczyć pozycję x i y i następnie wartość funkcji heurystycznej.
\newpage
\section {Test działania algorytmów wyszukiwania}
\indent Testy przeprowadzono na grafie losowo wygenerowanym, Za pomocą funkcji opisanej w punkcie 1. Droga w grafie zostaje wyszukiwana 10000 krotnie by można było zmierzyć czas działania tej operacji.


\begin{figure}[!h]
	\centering
	\includegraphics[scale=0.5]{./czas_wyszukiwania_1.png}
%	\caption{ Złożoność obliczeniowa sortowania w przypadku srednim}
	\end{figure}

\begin{table}[!h]

	\centering
	\begin{tabular}[!h]
	{| l | l | l | l|}
	\hline 
odleglosc &  A*   &   bfs(wszerz)&    dfs(w glab)\\
\hline
10   & -2.81318e-42 & 0.34 & 0.33\\
510  & 0.33 & 1.2   & 0.7\\
1010 & 0.7  & 2.07  & 1.09\\
1510 & 1.09 & 2.93  & 1.46\\
2010 & 1.46 & 3.81  & 1.83\\
2510 & 1.83 & 4.67  & 2.22\\
3010 & 2.22 & 5.56  & 2.6\\
3510 & 2.6  & 6.42  & 3.01\\
4010 & 3.01 & 7.3   & 13.831\\
4510 & 3.53 & 8.17  & 13.31\\
5010 & 3.81 & 9.3   & 4.18\\
5510 & 4.18 & 9.97  & 4.52\\
6010 & 4.52 & 10.82 & 4.9\\
6510 & 4.9  & 11.73 & 5.29\\
7010 & 5.29 & 12.58 & 5.68\\
7510 & 5.68 & 12.97 & 5.85\\
8010 & 5.85 & 13.82 & 6.24\\
8510 & 6.24 & 14.64 & 6.58\\
9010 & 6.58 & 15.48 & 6.97\\
9510 & 6.97 & 16.34 & 7.32\\\hline
	\end{tabular}
	
		\caption{Czas wyszukiwania}
	\end{table}
\newpage
\section{Wnioski}
\indent
	Z analizy tabeli wynika jasno że najlepszy czas wyszukiwania osiąga algorytm A*. Jest on najszybszy niezależnie od długości ścieżki i ilości wierzchołków na niej. 
\\\indent
	W przypadku wyszukiwania w głąb czas wyszukiwania jest różny. Zależy on od tego w której kolejności przeszukana zostanie ścieżka na której znajduje się wyszukiwany wierzchołek. 
\\\indent
	 Algorytm przeszukiwania w szerz jest najwolniejszy. Czas jego działania narasta wraz ze wzrostem porblemu, rozrostem grafu.
\\\indent 
	Zbadana została również długość ścieżek wyznaczonych przez algorytmy.
	Okazuje się że długość ścieżki wyznaczonej przez Algorytm A* oraz algorytm wyszukiwania w szerz jest taka sama, Jednak różnią się wierzchołkami ponieważ algorytm A* uwzględnia wartości wag. Scieżka wyznaczona przez algorytm wyszukiwania w głąb jest dużo dłuższa.


\section{Bibliografia}
\begin{itemize}
\item Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein: Wprowadzenie do algorytmów.
\end{itemize}

 
\end{document}
